version: 0.1
component: build
timeoutInSeconds: 20000
runAs: root
shell: bash
env:
  variables:
    region_key : "iad"
    tenancy_namespace : "idttmev3z6fl"
    oci_username : "amshenoy"
    repo_name : "bugbash-image-repo-amodh-2"
    image_tag : "test_image"
  vaultVariables:
    SECRET_1 : "ocid1.vaultsecret.oc1.iad.amaaaaaa4725fbqacbgxnxd4qx5c2iojhuus5elvulqrstpiviwf7hgv244q"
    SECRET_2 : "ocid1.vaultsecret.oc1.iad.amaaaaaa4725fbqake7fra6eruaov6bgxmdpqkaguize5yqva6mpeb2u66mq"
    oci_auth_token : "ocid1.vaultsecret.oc1.iad.amaaaaaa4725fbqa2lswqadxi75xnvg45vu6ccwhuh65xif37vehgy7iyx5q"
steps:
  - type: Command
    name: "Build Hello World"
    timeoutInSeconds: 10000
    command: |
      cd src/com/sample/
      javac HelloWorld.java
    onFailure:
      - type: Command
        command: |
          echo "Building Hello World failed"
        timeoutInSeconds: 1000
        runAs: root
  - type: Command
    timeoutInSeconds: 10000
    name: "Create Docker image"
    command: |
      docker build -t hello-world:1.0 .
    onFailure:
      - type: Command
        command: |
          echo "Creating Docker image failed"
        timeoutInSeconds: 1000
        runAs: root
  - type: Command
    name: "Saving Secrets"
    command: |
      echo "SECRET 1: ${SECRET_1}" > secrets.txt
      echo "SECRET 2: ${SECRET_2}" >> secrets.txt
    onFailure:
      - type: Command
        command: |
          echo "Saving secrets failed"
        runAs: root
  - type: Command
    name: "Pushing to OCIR"
    command: |
      docker login ${region_key}.ocir.io --username ${tenancy_namespace}/${oci_username} --password ${oci_auth_token}
      echo "Done logging in"

      docker tag hello-world:1.0 ${region_key}.ocir.io/${tenancy_namespace}/${repo_name}:${image_tag}
      echo "Done tagging"

      docker push ${region_key}.ocir.io/${tenancy_namespace}/${repo_name}:${image_tag}
      echo "Done Pushing Image"
    timeoutInSeconds: 20000
    onFailure:
      - type: Command
        command: |
          echo "Pushing Image stage failed"
        runAs: root
outputArtifacts:
  - name: secrets
    type: BINARY
    location: secrets.txt
